{
	"info": {
		"_postman_id": "d5e3320b-4c47-422f-a051-34406b3fa789",
		"name": "User",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://localhost:8080/users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3cf4de03-3f94-4957-a574-0a61e246f8e2",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"get all users\" , () => {",
							"    const jsonData = pm.response.json();",
							"    pm.test(\"data is array\", () => {",
							"       const actualData = typeof(jsonData);",
							"       const expectData = 'object';",
							"       pm.expect(actualData).to.eql(expectData);",
							"    });",
							"    pm.test(\"data in array\", () => {",
							"        const dataInArray = jsonData[0];",
							"        pm.test(\"id is number\", () => {",
							"           const actualData = typeof(dataInArray.id);",
							"           const expectData = 'number';",
							"           pm.expect(actualData).to.eql(expectData);",
							"        });",
							"        pm.test(\"firstname is string\", () => {",
							"           const actualData = typeof(dataInArray.firstname);",
							"           const expectData = 'string';",
							"           pm.expect(actualData).to.eql(expectData);",
							"        });",
							"        pm.test(\"lastname is string\", () => {",
							"           const actualData = typeof(dataInArray.lastname);",
							"           const expectData = 'string';",
							"           pm.expect(actualData).to.eql(expectData);",
							"        });",
							"        pm.test(\"createdAt is string\", () => {",
							"           const actualData = typeof(dataInArray.createdAt);",
							"           const expectData = 'string';",
							"           pm.expect(actualData).to.eql(expectData);",
							"        });",
							"        pm.test(\"updatedAt is string\", () => {",
							"           const actualData = typeof(dataInArray.updatedAt);",
							"           const expectData = 'string';",
							"           pm.expect(actualData).to.eql(expectData);",
							"        });",
							"    });",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://localhost:8080/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:8080/user/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c14b254e-3e99-4a50-824d-c33eb9988559",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"get user by id\" , () => {",
							"    const jsonData = pm.response.json();",
							"    pm.test(\"id is number\", () => {",
							"       const actualData = typeof(jsonData.id);",
							"       const expectData = 'number';",
							"       pm.expect(actualData).to.eql(expectData);",
							"    });",
							"    pm.test(\"firstname is string\", () => {",
							"       const actualData = typeof(jsonData.firstname);",
							"       const expectData = 'string';",
							"       pm.expect(actualData).to.eql(expectData);",
							"    });",
							"    pm.test(\"lastname is string\", () => {",
							"       const actualData = typeof(jsonData.lastname);",
							"       const expectData = 'string';",
							"       pm.expect(actualData).to.eql(expectData);",
							"    });",
							"    pm.test(\"createdAt is string\", () => {",
							"       const actualData = typeof(jsonData.createdAt);",
							"       const expectData = 'string';",
							"       pm.expect(actualData).to.eql(expectData);",
							"    });",
							"    pm.test(\"updatedAt is string\", () => {",
							"       const actualData = typeof(jsonData.updatedAt);",
							"       const expectData = 'string';",
							"       pm.expect(actualData).to.eql(expectData);",
							"    });",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://localhost:8080/user/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:8080/user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6162a9c0-7e59-4473-b780-f0707c0c8813",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"post User is complete\" , () => {",
							"    const jsonData = pm.response.json();",
							"    pm.test(\"id is number\", () => {",
							"       const actualData = typeof(jsonData.id);",
							"       const expectData = 'number';",
							"       pm.expect(actualData).to.eql(expectData);",
							"    });",
							"    pm.test(\"firstname is string\", () => {",
							"       const actualData = typeof(jsonData.firstname);",
							"       const expectData = 'string';",
							"       pm.expect(actualData).to.eql(expectData);",
							"    });",
							"    pm.test(\"lastname is string\", () => {",
							"       const actualData = typeof(jsonData.lastname);",
							"       const expectData = 'string';",
							"       pm.expect(actualData).to.eql(expectData);",
							"    });",
							"    pm.test(\"createdAt is string\", () => {",
							"       const actualData = typeof(jsonData.createdAt);",
							"       const expectData = 'string';",
							"       pm.expect(actualData).to.eql(expectData);",
							"    });",
							"    pm.test(\"updatedAt is string\", () => {",
							"       const actualData = typeof(jsonData.updatedAt);",
							"       const expectData = 'string';",
							"       pm.expect(actualData).to.eql(expectData);",
							"    });",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:8080/user/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2eeda75f-042f-45ea-928d-8923c0da1b8e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200 .Put User is complete.\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://localhost:8080/user/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"1"
					]
				}
			},
			"response": []
		}
	]
}